const express = require('express');
const bcrypt = require('bcryptjs');
const { authMiddleware, adminMiddleware } = require('../middleware/authMiddleware');
const User = require('../models/Users');
const userService = require("../services/UserService");

const router = express.Router();

/**
 * üìå API L·∫•y danh s√°ch t·∫•t c·∫£ kh√°ch h√†ng (Ch·ªâ Admin)
 * üîê Y√™u c·∫ßu x√°c th·ª±c & quy·ªÅn Admin
 */
router.get('/users', authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const users = await userService.getAllUsers();
        res.status(200).json(users);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

/**
 * üìå API L·∫•y th√¥ng tin user theo ID
 */
router.get('/:id', authMiddleware, async (req, res) => {
    try {
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if (req.user.role !== "admin" && req.user.userId !== parseInt(req.params.id)) {
            return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin n√†y" });
        }

        const user = await userService.getUserById(req.params.id);
        res.status(200).json(user);
    } catch (error) {
        res.status(404).json({ message: error.message });
    }
});

/**
 * üìå API C·∫≠p nh·∫≠t th√¥ng tin user
 */
router.put('/:id', authMiddleware, async (req, res) => {
    try {
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if (req.user.role !== "admin" && req.user.userId !== parseInt(req.params.id)) {
            return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin n√†y" });
        }

        const user = await userService.updateUser(req.params.id, req.body);
        res.status(200).json(user);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API X√≥a user
 */
router.delete('/:id', authMiddleware, adminMiddleware, async (req, res) => {
    try {
        await userService.deleteUser(req.params.id);
        res.status(200).json({ message: "ƒê√£ x√≥a user th√†nh c√¥ng!" });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API ƒê·ªïi m·∫≠t kh·∫©u
 */
router.post('/:id/change-password', authMiddleware, async (req, res) => {
    try {
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if (req.user.role !== "admin" && req.user.userId !== parseInt(req.params.id)) {
            return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi m·∫≠t kh·∫©u cho user n√†y" });
        }

        const { oldPassword, newPassword } = req.body;
        const result = await userService.changePassword(req.params.id, oldPassword, newPassword);
        res.status(200).json(result);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API Th√™m User (Ch·ªâ Admin)
 */
router.post('/users', authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { username, email, password, role, birth, gender, phone, address } = req.body;

        // Ki·ªÉm tra username ho·∫∑c email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await User.findOne({ where: { email } });
        const existingUsername = await User.findOne({ where: { username } });

        if (existingUser) return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!' });
        if (existingUsername) return res.status(400).json({ message: 'Username ƒë√£ t·ªìn t·∫°i!' });

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10).catch(err => {
            console.error('L·ªói m√£ h√≥a m·∫≠t kh·∫©u:', err);
            return res.status(500).json({ message: 'L·ªói m√£ h√≥a m·∫≠t kh·∫©u!' });
        });

        // T·∫°o user m·ªõi
        const newUser = await User.create({
            username, email, password: hashedPassword, role, birth, gender, phone, address
        });

        res.status(201).json({ message: 'T·∫°o t√†i kho·∫£n th√†nh c√¥ng!', user: newUser });
    } catch (error) {
        console.error('L·ªói th√™m user:', error);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß!' });
    }
});

/**
 * üìå API C·∫≠p nh·∫≠t th√¥ng tin User (Ch·ªâ Admin)
 */
router.put('/users/:id', authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { id } = req.params;
        const { username, email, role, birth, gender, phone, address } = req.body;

        const user = await User.findByPk(id);
        if (!user) return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i!' });

        await user.update({ username, email, role, birth, gender, phone, address });

        res.status(200).json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng!', user });
    } catch (error) {
        console.error('L·ªói c·∫≠p nh·∫≠t user:', error);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß!' });
    }
});

/**
 * üìå API X√≥a User (Ch·ªâ Admin)
 */
router.delete('/users/:id', authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { id } = req.params;

        const user = await User.findByPk(id);
        if (!user) return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i!' });

        await user.destroy();

        res.sendStatus(204); // No Content (X√≥a th√†nh c√¥ng)
    } catch (error) {
        console.error('L·ªói x√≥a user:', error);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß!' });
    }
});

module.exports = router;
