const express = require("express");
const { Event, Hall, Menu, User } = require("../models");
const { authMiddleware, adminMiddleware } = require("../middleware/authMiddleware");

const router = express.Router();

/**
 * üìå L·∫•y danh s√°ch s·ª± ki·ªán (Admin m·ªõi xem ƒë∆∞·ª£c)
 */
router.get("/", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const events = await Event.findAll({ include: [User, Hall, Menu] });
    res.json(events);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

/**
 * üìå T·∫°o s·ª± ki·ªán m·ªõi (Ch·ªâ user ƒë√£ ƒëƒÉng nh·∫≠p)
 */
router.post("/", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const { userId, eventDate, startTime, endTime, hallId, menuId, numberOfTables,numberOfGuests, totalPrice} = req.body;

    // Ki·ªÉm tra userId c√≥ kh·ªõp v·ªõi user ƒëang ƒëƒÉng nh·∫≠p kh√¥ng
    if (req.user.role !== "admin" && req.user.id !== userId) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·∫∑t s·ª± ki·ªán cho ng∆∞·ªùi kh√°c" });
    }

    // Ki·ªÉm tra User, Hall, Menu c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findByPk(userId);
    const hall = await Hall.findByPk(hallId);
    const menu = await Menu.findByPk(menuId);

    if (!user || !hall || !menu) {
      return res.status(404).json({ error: "User, Hall ho·∫∑c Menu kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng kh√°ch h·ª£p l·ªá
    if (!numberOfGuests || numberOfGuests <= 0) {
      return res.status(400).json({ error: "S·ªë kh√°ch ph·∫£i l·ªõn h∆°n 0" });
    }

    // Ki·ªÉm tra th·ªùi gian h·ª£p l·ªá
    if (new Date(startTime) >= new Date(endTime)) {
      return res.status(400).json({ error: "Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc th·ªùi gian k·∫øt th√∫c" });
    }

    // T√≠nh t·ªïng ti·ªÅn: gi√° s·∫£nh + (gi√° menu * s·ªë kh√°ch)
    //const totalPrice = hall.price + menu.price * numberOfGuests;
    //console.log(hall.price, menu.price);
    

    // T·∫°o s·ª± ki·ªán
    const event = await Event.create({
      userId,
      eventDate,
      startTime,
      endTime,
      hallId,
      menuId,
      numberOfTables, 
      numberOfGuests,
      totalPrice,
      status: "pending", // M·∫∑c ƒë·ªãnh tr·∫°ng th√°i l√† "pending"
    });

    res.status(201).json({ message: "T·∫°o s·ª± ki·ªán th√†nh c√¥ng!", event });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

/**
 * üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i s·ª± ki·ªán (Ch·ªâ Admin)
 */
router.put("/:id/status", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const { status } = req.body;

    // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
    if (!["pending", "confirmed", "cancelled"].includes(status)) {
      return res.status(400).json({ error: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
    }

    const event = await Event.findByPk(req.params.id);
    if (!event) return res.status(404).json({ error: "S·ª± ki·ªán kh√¥ng t·ªìn t·∫°i" });

    await event.update({ status });
    res.json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i s·ª± ki·ªán th√†nh c√¥ng", event });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

/**
 * üìå X√≥a s·ª± ki·ªán (Ch·ªâ Admin)
 */
router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const event = await Event.findByPk(req.params.id);
    if (!event) return res.status(404).json({ error: "S·ª± ki·ªán kh√¥ng t·ªìn t·∫°i" });

    await event.destroy();
    res.json({ message: "X√≥a s·ª± ki·ªán th√†nh c√¥ng" });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

module.exports = router;
