const express = require("express");
const { authMiddleware, adminMiddleware } = require("../middleware/authMiddleware");
const eventService = require("../services/EventService");

const router = express.Router();

/**
 * üìå API L·∫•y danh s√°ch t·∫•t c·∫£ s·ª± ki·ªán
 */
router.get("/", async (req, res) => {
    try {
        const events = await eventService.getAllEvents();
        res.status(200).json(events);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

/**
 * üìå API L·∫•y chi ti·∫øt 1 s·ª± ki·ªán
 */
router.get("/:id", authMiddleware, async (req, res) => {
    try {
        const event = await eventService.getEventById(req.params.id);
        res.status(200).json(event);
    } catch (error) {
        res.status(404).json({ message: error.message });
    }
});

/**
 * üìå API T·∫°o s·ª± ki·ªán m·ªõi
 */
router.post("/", authMiddleware, async (req, res) => {
    try {
        const newEvent = await eventService.createEvent(req.body);
        res.status(201).json(newEvent);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API C·∫≠p nh·∫≠t s·ª± ki·ªán
 */
router.put("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const updatedEvent = await eventService.updateEvent(req.params.id, req.body);
        res.status(200).json(updatedEvent);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API X√≥a s·ª± ki·ªán
 */
router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        await eventService.deleteEvent(req.params.id);
        res.status(200).json({ message: "ƒê√£ x√≥a s·ª± ki·ªán th√†nh c√¥ng!" });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API L·∫•y s·ª± ki·ªán theo tr·∫°ng th√°i
 */
router.get("/status/:status", async (req, res) => {
    try {
        const events = await eventService.getEventsByStatus(req.params.status);
        res.status(200).json(events);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API L·∫•y s·ª± ki·ªán theo kho·∫£ng th·ªùi gian
 */
router.get("/date-range", async (req, res) => {
    try {
        const { startDate, endDate } = req.query;
        
        // Validate input
        if (!startDate || !endDate) {
            return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c' });
        }

        const events = await eventService.getEventsByDateRange(startDate, endDate);
        res.status(200).json(events);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API Ki·ªÉm tra s·∫£nh c√≥ s·∫µn cho s·ª± ki·ªán
 */
router.post("/check-hall-availability", async (req, res) => {
    try {
        const { hallId, eventDate, timeSlotId } = req.body;
        
        // Validate input
        if (!hallId || !eventDate || !timeSlotId) {
            return res.status(400).json({ message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin: hallId, eventDate, timeSlotId' });
        }

        const isAvailable = await eventService.checkHallAvailability(hallId, eventDate, timeSlotId);
        res.status(200).json({ isAvailable });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API C·∫≠p nh·∫≠t tr·∫°ng th√°i s·ª± ki·ªán
 */
router.patch("/:id/status", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { status } = req.body;
        const updatedEvent = await eventService.updateEventStatus(req.params.id, status);
        res.status(200).json(updatedEvent);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API L·∫•y s·ª± ki·ªán theo ID ng∆∞·ªùi d√πng
 */
router.get("/user/:userId",  async (req, res) => {
    try {
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        // if (req.user.role !== "admin" && req.user.id !== parseInt(req.params.userId)) {
        //     return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin n√†y" });
        // }

        const events = await eventService.getEventsByUserId(req.params.userId);
        res.status(200).json(events);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

module.exports = router;
