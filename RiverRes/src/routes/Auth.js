const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/Users'); // Import model User
const { authMiddleware, adminMiddleware } = require('../middleware/authMiddleware');

const router = express.Router();

// üìå API ƒêƒÉng k√Ω (d√†nh cho c·∫£ user v√† admin)
router.post('/register', authMiddleware, async (req, res) => {
    try {
        const { username, email, password, role } = req.body;

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) return res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i!' });

        let userRole = 'user'; // M·∫∑c ƒë·ªãnh l√† user

        // N·∫øu user c·ªë t√¨nh ƒë·∫∑t role l√† 'admin', t·ª´ ch·ªëi y√™u c·∫ßu
        if (role === 'admin' && (!req.user || req.user.role !== 'admin')) {
            return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o t√†i kho·∫£n admin!' });
        }

        // N·∫øu admin g·ª≠i request v·ªõi role c·ª• th·ªÉ (user ho·∫∑c admin), h·ªá th·ªëng ch·∫•p nh·∫≠n
        if (req.user && req.user.role === 'admin' && role) {
            if (!['user', 'admin'].includes(role)) {
                return res.status(400).json({ message: 'Vai tr√≤ kh√¥ng h·ª£p l·ªá! Ch·ªâ c√≥ th·ªÉ l√† "user" ho·∫∑c "admin".' });
            }
            userRole = role; // Admin c√≥ th·ªÉ t·∫°o c·∫£ user v√† admin
        }

        // Hash m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // T·∫°o user m·ªõi v·ªõi quy·ªÅn x√°c ƒë·ªãnh
        const newUser = await User.create({
            username,
            email,
            password: hashedPassword,
            role: userRole
        });

        res.status(201).json({ message: `T·∫°o t√†i kho·∫£n ${userRole} th√†nh c√¥ng!`, user: newUser });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß!', error });
    }
});


// üìå API ƒêƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
        const user = await User.findOne({ where: { email } });
        if (!user) return res.status(400).json({ message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!' });

        // Ki·ªÉm tra m·∫≠t kh·∫©u c√≥ kh·ªõp kh√¥ng
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).json({ message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!' });

        // T·∫°o token JWT
        const token = jwt.sign(
            { userId: user.id, role: user.role }, 
            process.env.JWT_SECRET || 'secretkey', 
            { expiresIn: '1h' }
        );

        res.json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', token });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß!', error });
    }
});

module.exports = router;
