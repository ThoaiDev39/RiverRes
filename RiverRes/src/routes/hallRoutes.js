const express = require("express");
const Hall = require("../models/hall");
const { authMiddleware, adminMiddleware } = require('../middleware/authMiddleware');

const router = express.Router();

/**
 * üìå API L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£nh ti·ªác
 */
router.get("/", async (req, res) => {
    try {
        const halls = await Hall.findAll();
        res.status(200).json(halls);
    } catch (error) {
        console.error("L·ªói l·∫•y danh s√°ch s·∫£nh:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API L·∫•y th√¥ng tin s·∫£nh theo ID
 */
router.get("/:id", async (req, res) => {
    try {
        const hall = await Hall.findByPk(req.params.id);
        if (!hall) return res.status(404).json({ message: "S·∫£nh kh√¥ng t·ªìn t·∫°i!" });

        res.status(200).json(hall);
    } catch (error) {
        console.error("L·ªói l·∫•y s·∫£nh theo ID:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API Th√™m s·∫£nh m·ªõi (Ch·ªâ Admin)
 */
router.post("/", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { name, capacity, price, image, description } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
        if (!name || !capacity || !price) {
            return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
        }
        if (isNaN(capacity) || isNaN(price) || capacity <= 0 || price <= 0) {
            return res.status(400).json({ message: "Capacity v√† price ph·∫£i l√† s·ªë l·ªõn h∆°n 0!" });
        }

        const newHall = await Hall.create({ name, capacity, price, image, description });

        res.status(201).json({ message: "Th√™m s·∫£nh th√†nh c√¥ng!", hall: newHall });
    } catch (error) {
        console.error("L·ªói th√™m s·∫£nh:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API C·∫≠p nh·∫≠t th√¥ng tin s·∫£nh (Ch·ªâ Admin)
 */
router.put("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { id } = req.params;
        const { name, capacity, price, image, description } = req.body;

        const hall = await Hall.findByPk(id);
        if (!hall) return res.status(404).json({ message: "S·∫£nh kh√¥ng t·ªìn t·∫°i!" });

        await hall.update({
            name: name || hall.name,
            capacity: isNaN(capacity) ? hall.capacity : capacity,
            price: isNaN(price) ? hall.price : price,
            image: image || hall.image,
            description: description || hall.description,
        });

        res.status(200).json({ message: "C·∫≠p nh·∫≠t s·∫£nh th√†nh c√¥ng!", hall });
    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t s·∫£nh:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API X√≥a s·∫£nh (Ch·ªâ Admin)
 */
router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const hall = await Hall.findByPk(req.params.id);
        if (!hall) return res.status(404).json({ message: "S·∫£nh kh√¥ng t·ªìn t·∫°i!" });

        await hall.destroy();
        res.status(200).json({ message: "X√≥a s·∫£nh th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói x√≥a s·∫£nh:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

module.exports = router;
