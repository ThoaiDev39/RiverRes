const express = require("express");
const { authMiddleware, adminMiddleware } = require("../middleware/authMiddleware");
const dishService = require("../services/DishService");
const ImageService = require("../services/ImageService");
const upload = require("../middleware/upload.middleware");
const path = require('path');
const fs = require('fs');

const router = express.Router();

/**
 * üìå API L·∫•y danh s√°ch t·∫•t c·∫£ m√≥n ƒÉn
 */
router.get("/", async (req, res) => {
    try {
        const dishes = await dishService.getAllDishes();
        res.status(200).json(dishes);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

/**
 * üìå API L·∫•y chi ti·∫øt 1 m√≥n ƒÉn
 */
router.get("/:id", async (req, res) => {
    try {
        const dish = await dishService.getDishById(req.params.id);
        res.status(200).json(dish);
    } catch (error) {
        res.status(404).json({ message: error.message });
    }
});

/**
 * üìå API T·∫°o m√≥n ƒÉn m·ªõi
 */
router.post("/", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const newDish = await dishService.createDish(req.body);
        res.status(201).json(newDish);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API C·∫≠p nh·∫≠t m√≥n ƒÉn
 */
router.put("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const dish = await dishService.updateDish(req.params.id, req.body);
        res.status(200).json(dish);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API X√≥a m√≥n ƒÉn
 */
router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        await dishService.deleteDish(req.params.id);
        res.status(200).json({ message: "ƒê√£ x√≥a m√≥n ƒÉn th√†nh c√¥ng!" });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API T√¨m ki·∫øm m√≥n ƒÉn
 */
router.get("/search/:query", async (req, res) => {
    try {
        const dishes = await dishService.searchDishes(req.params.query);
        res.status(200).json(dishes);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API L·∫•y m√≥n ƒÉn theo danh m·ª•c
 */
router.get("/category/:category", async (req, res) => {
    try {
        const dishes = await dishService.getDishesByCategory(req.params.category);
        res.status(200).json(dishes);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API L·∫•y danh s√°ch ·∫£nh c·ªßa m√≥n ƒÉn
 * üîì Kh√¥ng y√™u c·∫ßu x√°c th·ª±c
 */
router.get("/:id/images", async (req, res) => {
    try {
        const images = await ImageService.getImages('dishes', req.params.id);
        res.status(200).json(images);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

/**
 * üìå API Upload ·∫£nh cho m√≥n ƒÉn
 * üîí Y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn admin
 */
router.post("/:id/images", authMiddleware, adminMiddleware, upload.single('image'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ message: "Vui l√≤ng ch·ªçn file ·∫£nh" });
        }
        const image = await ImageService.saveImage(req.file, 'dishes', req.params.id);
        res.status(201).json(image);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API X√≥a ·∫£nh c·ªßa m√≥n ƒÉn
 * üîí Y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn admin
 */
router.delete("/:id/images/:imageId", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        await ImageService.deleteImage(req.params.imageId);
        res.status(200).json({ message: "X√≥a ·∫£nh th√†nh c√¥ng" });
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API ƒê·∫∑t ·∫£nh l√†m ·∫£nh ch√≠nh c·ªßa m√≥n ƒÉn
 * üîí Y√™u c·∫ßu x√°c th·ª±c v√† quy·ªÅn admin
 */
router.put("/:id/images/:imageId/set-primary", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const image = await ImageService.setPrimaryImage(req.params.imageId, 'dishes', req.params.id);
        res.status(200).json(image);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

/**
 * üìå API L·∫•y file ·∫£nh theo t√™n
 * üîì Kh√¥ng y√™u c·∫ßu x√°c th·ª±c
 */
router.get('/:id/images/:fileName', async (req, res) => {
    const { id, fileName } = req.params;
    const entityType = 'dishes';

    // X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫øn file ·∫£nh
    const filePath = path.join(__dirname, `../publics/uploads/${entityType}/${fileName}`);

    // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
    fs.access(filePath, fs.constants.F_OK, (err) => {
        if (err) {
            return res.status(404).json({ message: 'File kh√¥ng t·ªìn t·∫°i' });
        }

        // Tr·∫£ v·ªÅ file ·∫£nh
        res.sendFile(filePath);
    });
});

module.exports = router;

