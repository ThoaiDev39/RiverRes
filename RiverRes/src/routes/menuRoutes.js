const express = require("express");
const { authMiddleware, adminMiddleware } = require("../middleware/authMiddleware");
const Menu = require("../models/menu");
const Dish = require("../models/dish");
const MenuDish = require("../models/menudish");

const router = express.Router();

/**
 * üìå API L·∫•y danh s√°ch t·∫•t c·∫£ Menu k√®m danh s√°ch m√≥n ƒÉn
 */
router.get("/", async (req, res) => {
    try {
        const menus = await Menu.findAll({
            include: {
                model: Dish,
                through: { attributes: ["quantity"] }, // L·∫•y s·ªë l∆∞·ª£ng t·ª´ b·∫£ng trung gian
            },
        });
        res.status(200).json(menus);
    } catch (error) {
        console.error("L·ªói l·∫•y danh s√°ch menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API L·∫•y chi ti·∫øt 1 menu
 */
router.get("/:id", async (req, res) => {
    try {
        const menu = await Menu.findByPk(req.params.id, {
            include: {
                model: Dish,
                through: { attributes: ["quantity"] },
            },
        });

        if (!menu) {
            return res.status(404).json({ message: "Menu kh√¥ng t·ªìn t·∫°i!" });
        }

        res.status(200).json(menu);
    } catch (error) {
        console.error("L·ªói l·∫•y menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API T·∫°o menu m·ªõi
 */
router.post("/", adminMiddleware, async (req, res) => {
    try {
        const { name, description } = req.body;
        const newMenu = await Menu.create({ name, description });
        res.status(201).json(newMenu);
    } catch (error) {
        console.error("L·ªói t·∫°o menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API Th√™m m√≥n ƒÉn v√†o menu
 */
router.post("/:id/add-dish", authMiddleware, adminMiddleware,  async (req, res) => {
    try {
        const { dishId, quantity } = req.body;
        const menuId = req.params.id;

        // Ki·ªÉm tra xem menu v√† dish c√≥ t·ªìn t·∫°i kh√¥ng
        const menu = await Menu.findByPk(menuId);
        const dish = await Dish.findByPk(dishId);

        if (!menu || !dish) {
            return res.status(404).json({ message: "Menu ho·∫∑c m√≥n ƒÉn kh√¥ng t·ªìn t·∫°i!" });
        }

        // Th√™m m√≥n v√†o menu (n·∫øu ƒë√£ c√≥ th√¨ c·∫≠p nh·∫≠t quantity)
        await MenuDish.upsert({ menuId, dishId, quantity });

        res.status(200).json({ message: "ƒê√£ th√™m m√≥n v√†o menu th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói th√™m m√≥n v√†o menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});
router.post("/createfullmenu", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { name, description, dishes } = req.body; // Dishes: [{ dishId, quantity }]
        
        // T·∫°o menu m·ªõi
        const newMenu = await Menu.create({ name, description });

        // N·∫øu c√≥ danh s√°ch m√≥n, th√™m v√†o b·∫£ng trung gian
        if (dishes && dishes.length > 0) {
            const menuDishes = dishes.map(dish => ({
                menuId: newMenu.id,
                dishId: dish.dishId,
                quantity: dish.quantity || 1, // M·∫∑c ƒë·ªãnh s·ªë l∆∞·ª£ng l√† 1 n·∫øu kh√¥ng c√≥
            }));

            await MenuDish.bulkCreate(menuDishes);
        }

        // Tr·∫£ v·ªÅ menu k√®m danh s√°ch m√≥n v·ª´a th√™m
        const fullMenu = await Menu.findByPk(newMenu.id, {
            include: {
                model: Dish,
                through: { attributes: ["quantity"] },
            },
        });

        res.status(201).json(fullMenu);
    } catch (error) {
        console.error("L·ªói t·∫°o menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});
router.put("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { name, description, dishes } = req.body;
        const menu = await Menu.findByPk(req.params.id);
        console.log(req.body);
        if (!menu) {
            return res.status(404).json({ message: "Menu kh√¥ng t·ªìn t·∫°i!" });
        }

        await menu.update({ name, description });
        
        if (dishes && dishes.length > 0) {            
            const menuDishes = dishes.map(dish => ({
                
                menuId: menu.id,
                dishId: dish.id,
                quantity: dish.quantity || 1, // M·∫∑c ƒë·ªãnh s·ªë l∆∞·ª£ng l√† 1 n·∫øu kh√¥ng c√≥
            }));
            await MenuDish.destroy({ where: { menuId: menu.id } });
            await MenuDish.bulkCreate(menuDishes); // Th√™m m√¥n ƒÉn v√†o b·∫£ng trung gian
        }

        const updatedMenu = await Menu.findByPk(req.params.id, {
            include: {
                model: Dish,
                through: { attributes: ["quantity"] },
            },
        });

        res.status(200).json(updatedMenu);
    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});
router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const menu = await Menu.findByPk(req.params.id);
        if (!menu) {
            return res.status(404).json({ message: "Menu kh√¥ng t·ªìn t·∫°i!" });
        }

        // X√≥a t·∫•t c·∫£ li√™n k·∫øt trong b·∫£ng trung gian tr∆∞·ªõc
        await MenuDish.destroy({ where: { menuId: menu.id } });

        // Sau ƒë√≥ x√≥a menu
        await menu.destroy();

        res.status(200).json({ message: "ƒê√£ x√≥a menu th√†nh c√¥ng!" , id: menu.id});
    } catch (error) {
        console.error("L·ªói x√≥a menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});



module.exports = router;
