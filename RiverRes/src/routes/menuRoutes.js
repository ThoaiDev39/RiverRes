const express = require("express");
const { authMiddleware, adminMiddleware } = require("../middleware/authMiddleware");
const Menu = require("../models/menu");

const router = express.Router();

/**
 * üìå API L·∫•y danh s√°ch t·∫•t c·∫£ Menu
 */
router.get("/", async (req, res) => {
    try {
        const menus = await Menu.findAll();
        res.status(200).json(menus);
    } catch (error) {
        console.error("L·ªói l·∫•y danh s√°ch menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API L·∫•y chi ti·∫øt m·ªôt Menu theo ID
 */
router.get("/:id", async (req, res) => {
    try {
        const menu = await Menu.findByPk(req.params.id);
        if (!menu) return res.status(404).json({ message: "Menu kh√¥ng t·ªìn t·∫°i!" });

        res.status(200).json(menu);
    } catch (error) {
        console.error("L·ªói l·∫•y menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API Th√™m Menu (Ch·ªâ Admin)
 */
router.post("/", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { name, description } = req.body;

        if (!name || name.trim() === "") {
            return res.status(400).json({ message: "T√™n menu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
        }

        const newMenu = await Menu.create({ name, description });

        res.status(201).json({ message: "T·∫°o menu th√†nh c√¥ng!", menu: newMenu });
    } catch (error) {
        console.error("L·ªói th√™m menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API C·∫≠p nh·∫≠t th√¥ng tin Menu (Ch·ªâ Admin)
 */
router.put("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const { id } = req.params;
        const { name, description } = req.body;

        const menu = await Menu.findByPk(id);
        if (!menu) return res.status(404).json({ message: "Menu kh√¥ng t·ªìn t·∫°i!" });

        await menu.update({
            name: name || menu.name,
            description: description || menu.description,
        });

        res.status(200).json({ message: "C·∫≠p nh·∫≠t menu th√†nh c√¥ng!", menu });
    } catch (error) {
        console.error("L·ªói c·∫≠p nh·∫≠t menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

/**
 * üìå API X√≥a Menu (Ch·ªâ Admin)
 */
router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
    try {
        const menu = await Menu.findByPk(req.params.id);
        if (!menu) return res.status(404).json({ message: "Menu kh√¥ng t·ªìn t·∫°i!" });

        await menu.destroy();
        res.status(200).json({ message: "X√≥a menu th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói x√≥a menu:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
    }
});

module.exports = router;
